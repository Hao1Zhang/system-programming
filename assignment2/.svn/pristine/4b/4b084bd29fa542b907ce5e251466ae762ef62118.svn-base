

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/wait.h>

#define STRING_LENGTH 4096

char *strsep(char **stringp, const char *delim)
{
    char *rv = *stringp;
    if (rv)
    {
        *stringp += strcspn(*stringp, delim);
        if (**stringp)
            *(*stringp)++ = '\0';
        else
            *stringp = 0;
    }
    return rv;
}

void parse(char *str, char **cmd)
{
    int i;
    for (i = 0; i < 256; i++)
    {
        cmd[i] = strsep(&str, " ");
        if (cmd[i] == NULL)
            break;
    }
}

int main(int argc, char const *argv[])
{
    char line[100][STRING_LENGTH];
    int count = 0;
    while (fgets(line[count], STRING_LENGTH, stdin) != NULL)
    {
        if (line[count][0] == '\n')
        {
            count--;
        }
        if (count >= 99){
            break;
        }

        count++;
    }

    int i = 0;

    int new_pipe_fds[2];
    int old_pipe_fds[2];

    int pip;

    for (i = 0; i < count; i++)
    {
        if (i + 1 < count)
        {
            pipe(new_pipe_fds);
        }

        pip = fork();

        if (pip == 0)
        {
            if (i - 1 >= 0)
            {
                dup2(old_pipe_fds[0], STDIN_FILENO);
                close(old_pipe_fds[0]);
                close(old_pipe_fds[1]);
            }
            if (i + 1 < count)
            {

                close(new_pipe_fds[0]);
                dup2(new_pipe_fds[1], STDOUT_FILENO);

                close(new_pipe_fds[1]);
            }

            char *token = malloc(sizeof(char));
            char *command[100];
            strtok(line[i], "\n");
            int number_token = 0;
            count = 0
            while (token != NULL)
            {
                command[number_token] = token;
                strtok(NULL, "\n");
                number_token++;
                if (count>=99)
                {
                   break;
                }
                
                count ++;
            } 
            command[number_token] = NULL;
            parse(line[i], command);
            execvp(command[0], command);
        }

        else
        {
            if (i - 1 >= 0)
            {
                close(old_pipe_fds[0]);
                close(old_pipe_fds[1]);
            }
            if (i + 1 < count)
            {
                old_pipe_fds[0] = new_pipe_fds[0];
                old_pipe_fds[1] = new_pipe_fds[1];
            }
            // wait(NULL);
        }
    }

    return 0;
}
