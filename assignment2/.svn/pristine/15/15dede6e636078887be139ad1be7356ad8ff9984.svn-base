

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/wait.h>

#define STRING_LENGTH 4096

int main(int argc, char const *argv[])
{
    char commandList[100][STRING_LENGTH]; 
    int number_command = 0;               

    while (1)
    {
        if (fgets(commandList[number_command], STRING_LENGTH, stdin) == NULL)
        {
            break;
        }
        else
        {
            if (commandList[number_command][0] == '\n')
            {
                number_command--;
            }

            number_command++;
        }
    }

    int length_command;
    int i = 0;
    for (i = 0; i < number_command; i++)
    {
        length_command = strlen(commandList[i]);
        if (commandList[i][length_command - 1] == '\n')
        {
            commandList[i][length_command - 1] = '\0';
        }
    }

    int new_pipe_fds[2];
    int old_pipe_fds[2];

    int processID;

    int index;
    for (index = 0; index < number_command; index++)
    {
        if (index + 1 < number_command)
        {
            pipe(new_pipe_fds);
        }
        processID = fork();
        if (processID == 0)
        {
            if (index - 1 >= 0)
            {
                dup2(old_pipe_fds[0], STDIN_FILENO);
                close(old_pipe_fds[0]);
                close(old_pipe_fds[1]);
            }
            if (index + 1 < number_command)
            {

                close(new_pipe_fds[0]);
                dup2(new_pipe_fds[1], STDOUT_FILENO);
                close(new_pipe_fds[1]);
            }
            char *token;
            char *command[100];
            token = strtok(commandList[index], " ");
            int number_token = 0;
            do
            {
                command[number_token] = token;
                token = strtok(NULL, " ");
                number_token++;
            } while (token != NULL);
            command[number_token] = NULL;
            execvp(command[0], command);
        }

        else
        {
            if (index - 1 >= 0)
            {
                close(old_pipe_fds[0]);
                close(old_pipe_fds[1]);
            }
            if (index + 1 < number_command)
            {
                old_pipe_fds[0] = new_pipe_fds[0];
                old_pipe_fds[1] = new_pipe_fds[1];
            }
            wait(NULL);
        }
    }

    return 0;
}
