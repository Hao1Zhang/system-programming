/* execute.c - code used by small shell to execute commands */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/wait.h>
#include "smsh.h"
#include <fcntl.h>
#include <glob.h>

int execute(char *argv[])
/*
 * purpose: run a program passing it arguments
 * returns: status returned via wait, or -1 on error
 *  errors: -1 on fork() or wait() errors

 */
{
    int pid;
    int child_info = -1;

    if (argv[0] == NULL) /* nothing succeeds	*/
        return 0;

    if ((pid = fork()) == -1)
        perror("fork");
    else if (pid == 0)
    {
        signal(SIGINT, SIG_DFL);
        signal(SIGQUIT, SIG_DFL);
        execvp(argv[0], argv);
        perror("cannot execute command");
        exit(1);
    }
    else
    {
        if (wait(&child_info) == -1)
            perror("wait");
    }
    return child_info;
}

int executePiped(char *argv[])
/*  PIPE
 * purpose: run a multiple program passing it arguments
 * returns: status returned via wait, or -1 on error
 *  errors: -1 on fork() or wait() errors
 */
{
    int child_info = -1;
    int count = 0; //this count the lenth of argv

    if (argv[0] == NULL) /* nothing succeeds	*/
        return 0;

    while (argv[count] != NULL)
    {
        count++;
    }

    int new_pipe_fds[2];
    int old_pipe_fds[2];

    int pid;

    int index;
    for (index = 0; index < count; index++)
    {

        if (index + 1 < count)
        {
            pipe(new_pipe_fds);
        }

        pid = fork();

        if (pid == 0)
        {
            if (index - 1 >= 0)
            {
                dup2(old_pipe_fds[0], STDIN_FILENO);
                close(old_pipe_fds[0]);
                close(old_pipe_fds[1]);
            }
            if (index + 1 < count)
            {
                close(new_pipe_fds[0]);
                dup2(new_pipe_fds[1], STDOUT_FILENO);
                close(new_pipe_fds[1]);
            }

            //parse token
            char *token;
            char **command;
            command = malloc(256);
            token = strtok(argv[index], " ");
            int number_token = 0;
            while (token != NULL)
            {
                command[number_token] = token;
                // get the next token
                token = strtok(NULL, " ");
                number_token++;
            } 
            command[number_token] = NULL;

            //execute
            signal(SIGINT, SIG_DFL);
            signal(SIGQUIT, SIG_DFL);
            execvp(command[0], command);
            perror("cannot execute command");
            exit(1);

            freelist(command);
        }

        else
        {

            if (index - 1 >= 0)
            {
                close(old_pipe_fds[0]);
                close(old_pipe_fds[1]);
            }
            if (index + 1 < count)
            {
                old_pipe_fds[0] = new_pipe_fds[0];
                old_pipe_fds[1] = new_pipe_fds[1];
            }
            if (wait(&child_info) == -1)
                perror("wait");
        }
    }
    return child_info;
}